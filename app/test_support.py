#!/usr/bin/env python3
"""
Test Support Classes
Inneh√•ller klasser och funktioner som anv√§nds av testerna
"""

import pytest
import time
import subprocess
from typing import Dict, Any
import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent / "sipp-tester"))
from sipp_support import SippTester
from sip_test_utils import get_environment_status


class TestEnvironmentSupport:
    """Support-klass f√∂r milj√∂tester"""
    
    @staticmethod
    def get_kamailio_config(request) -> Dict[str, Any]:
        """H√§mta Kamailio-konfiguration baserad p√• environment-variabler"""
        # H√§mta kommandoradsargument
        cmd_host = request.config.getoption("--kamailio-host")
        cmd_port = request.config.getoption("--kamailio-port")
        cmd_env = request.config.getoption("--environment")
        
        # Anv√§nd SippTester med kommandoradsargument om de finns
        if cmd_host or cmd_port or cmd_env:
            sipp_tester = SippTester(
                kamailio_host=cmd_host,
                kamailio_port=int(cmd_port) if cmd_port else 5060,
                environment=cmd_env or "auto"
            )
        else:
            # Anv√§nd SippTester f√∂r att f√• r√§tt konfiguration
            sipp_tester = SippTester()
        
        # Om host redan inneh√•ller port, anv√§nd den som den √§r
        if ":" in sipp_tester.kamailio_host:
            host = sipp_tester.kamailio_host
            port = int(sipp_tester.kamailio_host.split(":")[-1])
        else:
            host = sipp_tester.kamailio_host
            port = sipp_tester.kamailio_port
        
        return {
            'host': host,
            'port': port,
            'environment': sipp_tester.environment
        }


class SippTestSupport:
    """Support-klass f√∂r SIPp-tester"""
    
    @staticmethod
    def create_sipp_tester(environment: str) -> SippTester:
        """Skapa SippTester-instans"""
        return SippTester(
            kamailio_host="localhost",
            kamailio_port=5060,
            timeout=30,
            environment=environment
        )
    
    @staticmethod
    def ensure_environment_ready() -> Dict[str, bool]:
        """Kontrollera att milj√∂n √§r redo f√∂r SIPp-tester"""
        env_status = get_environment_status()
        
        # Kontrollera kritiska komponenter f√∂r SIPp-tester
        critical_checks = ["docker", "sipp_image", "sipp_container", "sipp_installed", "sipp_scenarios"]
        missing_critical = [check for check in critical_checks if not env_status.get(check, False)]
        
        if missing_critical:
            pytest.skip(f"Kritiska komponenter f√∂r SIPp-tester saknas: {', '.join(missing_critical)}")
        
        return env_status
    
    @staticmethod
    def ensure_kamailio_ready() -> Dict[str, bool]:
        """Kontrollera att Kamailio √§r redo"""
        env_status = get_environment_status()
        
        print(f"üîç Kamailio readiness check:")
        for check, status in env_status.items():
            print(f"  {check}: {status}")
        
        # Kontrollera kritiska komponenter f√∂r Kamailio-tester
        critical_checks = ["docker", "kubernetes_cluster", "kamailio_namespace", "kamailio_deployment", "kamailio_pods", "kamailio_service"]
        missing_critical = [check for check in critical_checks if not env_status.get(check, False)]
        
        if missing_critical:
            print(f"‚ùå Saknade kritiska komponenter: {', '.join(missing_critical)}")
            pytest.skip(f"Kritiska komponenter f√∂r Kamailio-tester saknas: {', '.join(missing_critical)}")
        
        print(f"‚úÖ Alla kritiska komponenter finns")
        return env_status
    
    @staticmethod
    def start_port_forward() -> subprocess.Popen:
        """Starta port-forward f√∂r Kamailio"""
        try:
            # F√∂r Kind-kluster anv√§nder vi NodePort ist√§llet f√∂r port-forward
            # Kontrollera om vi k√∂r i Kind-kluster
            result = subprocess.run(
                ["kubectl", "get", "nodes", "-o", "jsonpath={.items[0].metadata.name}"],
                capture_output=True,
                text=True,
                timeout=10
            )
            
            if result.returncode == 0 and "sipp-k8s-lab" in result.stdout:
                print("üîç Kind-kluster detekterat, anv√§nder NodePort ist√§llet f√∂r port-forward")
                # Returnera en dummy-process f√∂r Kind-kluster
                class DummyProcess:
                    def poll(self): return None
                    def terminate(self): pass
                    def wait(self): pass
                return DummyProcess()
            
            # F√∂r andra kluster, anv√§nd port-forward
            print("üîç Anv√§nder port-forward f√∂r Kamailio")
            process = subprocess.Popen(
                ["kubectl", "port-forward", "svc/kamailio-service", "5060:5060", "-n", "kamailio"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            
            # V√§nta lite f√∂r att port-forward ska starta
            time.sleep(2)
            
            if process.poll() is None:
                return process
            else:
                pytest.skip("Kunde inte starta port-forward f√∂r Kamailio")
        except Exception as e:
            pytest.skip(f"Kunde inte starta port-forward: {e}")
    
    @staticmethod
    def create_sipp_tester_with_kamailio(environment: str) -> SippTester:
        """Skapa SippTester-instans f√∂r Kamailio-tester"""
        return SippTester(
            kamailio_host="localhost",
            kamailio_port=5060,
            timeout=30,
            environment=environment
        ) 